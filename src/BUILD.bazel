load("@npm//:history-server/package_json.bzl", history_server_bin = "bin")
load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@aspect_rules_rollup//rollup:defs.bzl", "rollup_bundle")
load("@npm//:html-insert-assets/package_json.bzl", html_insert_assets_bin = "bin")
load("//src/tools:ng.bzl", "ng_project")
load("@aspect_rules_terser//terser:defs.bzl", "terser_minified")


package(default_visibility = ["//:__subpackages__"])

ng_project(
  name = "index",
  srcs = [
    "index.ts",
  ],
  deps = [
    "//src/app",
    "//src/app:internals",
    "//src/app:workflow_graph_wrapper",
    "//src/app:directed_acyclic_graph",
    "//src/app:node_spec",
    "//src/app/logger",
  ]
)

ng_project(
    name = "src",
    srcs = [
        "main.opensource.ts",
        "main.prod.opensource.ts",
    ],
    deps = [
        "//src/app",
        ":index",
        "//:node_modules/@angular/core",
        "//:node_modules/@angular/localize",
        "//:node_modules/@angular/platform-browser",
    ],
)

# Files that we serve in both development and production
_ASSETS = [
    # We load zone.js outside the bundle. That's because it's a "pollyfill"
    # which speculates that such features might be available in a browser.
    # Also it's tricky to configure dead code elimination to understand that
    # zone.js is used, given that we don't have any import statement that
    # imports from it.
    "//:node_modules/zone.js",
]

rollup_bundle(
    name = "bundle-es2015-dev",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.opensource.ts": "index.dev",
    },
    output_dir = True,
    deps = [
        "//src",
        "//:node_modules/@rollup/plugin-commonjs",
        "//:node_modules/@rollup/plugin-node-resolve",
        "//:node_modules/@rollup/plugin-replace",
    ],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.opensource.ts": "registerWorkflowGraphWebComponent",
    },
    format = "iife",
    output_dir = True,
    deps = [
        "//src",
        "//:node_modules/@rollup/plugin-commonjs",
        "//:node_modules/@rollup/plugin-node-resolve",
        "//:node_modules/@rollup/plugin-replace",
    ],
)

html_insert_assets_bin.html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath //src:example/index.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        "--scripts --module $(execpath :bundle-es2015-dev)/index.dev.js",
    ],
    srcs = [
        "//src:example/index.html",
        ":bundle-es2015-dev",
    ] + _ASSETS,
)

pkg_web(
    name = "devapp",
    srcs = _ASSETS + [
        ":bundle-es2015-dev",
        ":inject_scripts_for_dev",
        # Include polyfills that will be requested by old browsers
        # "//:node_modules/systemjs/dist/system.js",
        # "//:node_modules/core-js/client/core.min.js",
    ],
    # In production mode we serve some polyfills with script tags that have hard-coded paths in the index.html
    # so we must serve them at that path, by stripping a prefix
    additional_root_paths = [
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
    ],
)

history_server_bin.history_server_binary(
    name = "devserver",
    data = [":devapp"],
)

terser_minified(
    name = "bundle-es2015.min",
    srcs = [":bundle-es2015"],
)

html_insert_assets_bin.html_insert_assets(
    name = "inject_scripts_for_prod",
    # we can't output "src/example/index.html" since that collides with the devmode file.
    # pkg_web rule will re-root paths that start with _{name} by default
    # so we output "_prodapp/src/example/index.html" so that it is mapped to
    # `example/index.html` in the web package.
    outs = ["_prodapp/src/index.html"],
    args = [
        "--html=$(execpath //src:example/index.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        "--scripts --module $(execpath :bundle-es2015.min)/registerWorkflowGraphWebComponent.js",
    ],
    srcs = [
        "//src:example/index.html",
        ":bundle-es2015.min",
    ] + _ASSETS,
)

pkg_web(
    name = "prodapp",
    srcs = _ASSETS + [
        ":bundle-es2015.min",
        # each injected index file should be listed here
        ":inject_scripts_for_prod",
        # Include polyfills that will be requested by old browsers
        # "//:node_modules/systemjs/dist/system.js",
        # "//:node_modules/core-js/client/core.min.js",
    ],
    # In production mode we serve some polyfills with script tags that have hard-coded paths in the index.html
    # so we must serve them at that path, by stripping a prefix
    additional_root_paths = [
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
    ],
)

history_server_bin.history_server_binary(
    name = "prodserver",
    data = [":prodapp"],
)
